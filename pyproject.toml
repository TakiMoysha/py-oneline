[project]
name = "taki-python"
version = "0.1.0"
authors = [{ name = "TakiMoysha", email = "mpwema782@gmail.com" }]
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "argparse>=1.4.0",
    "structlog>=24.4.0",
]

[project.scripts]
runtime = "runtime.__main__:repl"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build]
dev-mode-dirs = ["src/"]
include = []
packages = ["src/runtime"]

[tool.uv]
default-groups = ["dev", "docs", "linting", "test"]

[dependency-groups]
dev = [
  { include-group = "docs" },
  { include-group = "linting" },
  { include-group = "test" },
]
docs = ["git-cliff>=2.7.0"]
linting = [
  "pre-commit>=3.4.0",
  "ruff>=0.0.287",
  "slotscheck",
  "types-click",
  "types-passlib",
  "types-python-jose",
  "types-pyyaml",
  "types-redis",
  "asyncpg-stubs",
  "pylint",
]
test = ["pytest", "coverage", "pytest-sugar"]

[tool.black]
line-length = 120

[tool.ruff]
fix = true
line-length = 120
lint.fixable = ["ALL"]
lint.ignore = [
  "E501",    # pycodestyle line too long, handled by black
  "D100",    # pydocstyle - missing docstring in public module
  "D101",    # pydocstyle - missing docstring in public class
  "D102",    # pydocstyle - missing docstring in public method
  "D103",    # pydocstyle - missing docstring in public function
  "D104",    # pydocstyle - missing docstring in public package
  "D105",    # pydocstyle - missing docstring in magic method
  "D106",    # pydocstyle - missing docstring in public nested class
  "D107",    # pydocstyle - missing docstring in __init__
  "D202",    # pydocstyle - no blank lines allowed after function docstring
  "D205",    # pydocstyle - 1 blank line required between summary line and description
  "D415",    # pydocstyle - first line should end with a period, question mark, or exclamation point
  "UP037",   # pyupgrade - removes quotes from type annotation
  "A003",    # flake8-builtins - class attribute {name} is shadowing a python builtin
  "B010",    # flake8-bugbear - do not call setattr with a constant attribute value
  "B008",    #  flake8-bugbear - Do not perform function call `Parameter` in argument defaultsRuff(B008)
  "RUF012",  # ruff - mutable class attributes should be annotated with `typing.ClassVar`
  "ANN401",  # ruff - Dynamically typed expressions (typing.Any) are disallowed
  "PLR0913", # ruff - Too many arguments to function call
  "PLR2004", # Magic value used in comparison
  "FBT001",  # Boolean typed positional argument in function definition
  "FBT002",  # Boolean default positional argument in function definition
  "FBT003",  # Boolean Boolean default positional argument in function definition
  "ARG002",  # Unused method argument
  "ARG001",  #  Unused function argument
  "TD002",
  "TD003",
  "FIX002",
  "PGH003",
  "RUF006",
  "SLF001",
  "PT007",
  'S603',
  "E501",    # pycodestyle line too long, handled by black
  "PLW2901", # pylint - for loop variable overwritten by assignment target
  "ANN401",
  "FBT",
  "PLR0913", # too many arguments
  "PT",
  "TD",
  "PERF203", # ignore for now; investigate
]
lint.select = ["ALL"]
# Allow unused variables when underscore-prefixed.
lint.dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
src = ["src", "tests/"]
target-version = "py311"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.mccabe]
max-complexity = 12

[tool.ruff.lint.pep8-naming]
classmethod-decorators = ["classmethod"]

[tool.ruff.lint.isort]
known-first-party = ['tests', 'app']

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ['F401', 'D104']
"tests/*.py" = ['D103', 'S101', 'D104']

[tool.ruff.pydocstyle]
convention = "google"

[tool.pytest.ini_options]
addopts = ["-ra"]
testpaths = ["tests"]

[tool.coverage.report]
exclude_lines = [
  'if TYPE_CHECKING:',
  'pragma: no cover',
  "if __name__ == .__main__.:",
  'def __repr__',
  'if self\.debug:',
  'if settings\.DEBUG',
  'raise AssertionError',
  'raise NotImplementedError',
  'if 0:',
  'class .*\bProtocol\):',
  '@(abc\.)?abstractmethod',
]
omit = ["*/tests/*"]
show_missing = true

[tool.coverage.run]
branch = true
omit = ["tests/*", "**/*/migrations/**/*.py", "scripts/*"]

[tool.slotscheck]
strict-imports = false

[tool.codespell]
ignore-words-list = "alog"

[tool.git-cliff.changelog]
header = """
# Changelog\n
All commits to this project will be documented in this file.\n
"""
body = """
{% if version %}\
  ## `Release [v{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }} <https://github.com/TakiMoysha/taki-python/releases/tag/v{{ version | trim_start_matches(pat="v") }}>`_
  * `See All commits in v{{ version | trim_start_matches(pat="v") }} <https://github.com/TakiMoysha/taki-python/commits/v{{ version | trim_start_matches(pat="v") }}>`_ \n
{% else %}\
  ## [unreleased] \n
{% endif %}\

{% if previous %}\
    {% if previous.commit_id %}
        `{{ previous.commit_id | truncate(length=7, end="") }} <https://github.com/TakiMoysha/taki-python/commit/{{ previous.commit_id }}>`_ ... \
            `{{ commit_id | truncate(length=7, end="") }} <https://github.com/TakiMoysha/taki-python/commit/{{ commit_id }}>`_ \
            | `See diff for {{ version | trim_start_matches(pat="v") }} <https://github.com/TakiMoysha/taki-python/compare/{{ previous.commit_id }}...{{ commit_id }}>`_
    {% endif %}\
{% endif %}\

{% for group, commits in commits | group_by(attribute="group") %}
  ## {{ group | upper_first }}
    {% for commit in commits %}
      - [{{ commit.id | truncate(length=7, end="") }}](https://github.com/TakiMoysha/taki-python/commit/{{ commit.id }}) {% if commit.breaking %}[**breaking**] {% endif %} - {{ commit.message | upper_first | trim }} ({{ commit.author.name }})\
          {% for footer in commit.footers -%}
            {{ footer.token }}{{ footer.separator }}{{ footer.value }}\
          {% endfor %}\
    {% endfor %}
{% endfor %}
"""
footer = """
<!-- Changelog -->
"""
trim = true

[tool.git-cliff.git]
conventional_commits = true
filter_unconventional = true
filter_commits = false
split_commits = false
commit_parsers = [
  { message = "^feat", group = "Features" },
  { message = "^fix", group = "Bug Fixes" },
  { message = "^doc", group = "Documentation" },
  { message = "^perf", group = "Performance" },
  { message = "^refactor", group = "Refactor" },
  { message = "^style", group = "Styling" },
  { message = "^test", group = "Testing" },
  { message = "^chore\\(release\\) prepare for", skip = true },
  { message = "^chore\\(skip\\)", skip = true },
  { message = "^chore", group = "Miscellaneous Tasks" },
  { body = ".*security", group = "Security" },
]
protect_breaking_commits = false
tag_pattern = "v[0-9]*"
skip_tags = "v0.1.0-beta.1"
ignore_tags = ""
topo_order = false
sort_commits = "oldest"
